<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大整数减法</title>
      <link href="/2023/03/23/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%87%8F%E6%B3%95/"/>
      <url>/2023/03/23/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%87%8F%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="大整数减法"><a href="#大整数减法" class="headerlink" title="大整数减法"></a>大整数减法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有些时候我们需要计算两个很大的整数的差，但是 C++ 中 int或者long long 类型的范围很小，无法存储大整数。<br><br>下段代码两个大整数输入转化为整型数组，并用数组计算出两数的差，并将结果输出。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rev</span><span class="params">(<span class="type">int</span> fir[],<span class="type">int</span> sec[],string a,string b)</span> <span class="comment">//将两个字符串转化为数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">length</span>();i++) <span class="comment">//倒序存入fir数组中</span></span><br><span class="line">    &#123;</span><br><span class="line">        fir[i]=a[a.<span class="built_in">length</span>()-i<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;                       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;b.<span class="built_in">length</span>();i++) <span class="comment">//倒序存入sec数组中</span></span><br><span class="line">    &#123;</span><br><span class="line">        sec[i]=b[b.<span class="built_in">length</span>()-i<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> <span class="comment">//返回较大值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a,b; <span class="comment">//定义两个字符串</span></span><br><span class="line">    <span class="type">int</span> fir[<span class="number">20002</span>],sec[<span class="number">20002</span>],ans[<span class="number">20002</span>]=&#123;<span class="number">0</span>&#125;,i,x,len; <span class="comment">//定义需要用到的三个数组</span></span><br><span class="line">    <span class="keyword">while</span> (cin&gt;&gt;a&gt;&gt;b) <span class="comment">//循环读入两个大整数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">length</span>() &lt; b.<span class="built_in">length</span>() || (a.<span class="built_in">length</span>() == b.<span class="built_in">length</span>() &amp;&amp; a &lt; b)) <span class="comment">//将被减数始终保持大于等于减数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a, b); <span class="comment">//交换被减数和减数的顺序</span></span><br><span class="line">            cout&lt;&lt;<span class="string">&#x27;-&#x27;</span>;  <span class="comment">//输出负号</span></span><br><span class="line">        &#125;</span><br><span class="line">        len=<span class="built_in">max</span>(a.<span class="built_in">length</span>(),b.<span class="built_in">length</span>()); <span class="comment">//计算两个数中最长数字的位数</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=len;i++)  <span class="comment">//将两个数组清零</span></span><br><span class="line">        &#123;</span><br><span class="line">            fir[i]=<span class="number">0</span>;</span><br><span class="line">            sec[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rev</span>(fir,sec,a,b); <span class="comment">//调用rev函数，将两个字符串倒序存入数组中</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=len;i++) <span class="comment">//从最低位开始计算</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fir[i]&lt;sec[i]) <span class="comment">//如果该位被减数小于减数，则要借位</span></span><br><span class="line">            &#123;</span><br><span class="line">                fir[i]+=<span class="number">10</span>;</span><br><span class="line">                fir[i+<span class="number">1</span>]-=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i]=fir[i]-sec[i];  <span class="comment">//计算差并存入ans数组                   </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (ans[len]==<span class="number">0</span>&amp;&amp;len!=<span class="number">0</span>) <span class="comment">//去掉计算结果最高位的多余0</span></span><br><span class="line">        &#123;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len;i&gt;=<span class="number">0</span>;i--) <span class="comment">//反序输出答案</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;ans[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种竖式计算的方式，也正是在模拟我们小学时学到的手算减法的过程。<br></p><h2 id="rev函数作用"><a href="#rev函数作用" class="headerlink" title="rev函数作用"></a>rev函数作用</h2><p>rev 函数将输入的两个字符串逆序存入数组中，主要是为了方便从最低位开始做减法计算，从而保证了每位相减时的对应关系。<br></p><p>举个例子，假设输入的两个字符串分别为 123456 和 67，我们需要先将它们转化为整型数组。如果不逆序存储，那么数组存储方式就是：<br></p><h4 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h4><blockquote><p>fir: 1 2 3 4 5 6<br><br>sec: 6 7</p></blockquote><h4 id="实际存储："><a href="#实际存储：" class="headerlink" title="实际存储："></a>实际存储：</h4><blockquote><p>fir: 1 2 3 4 5 6 0 0 0 0 … &#x2F;&#x2F;后面还有很多 0<br>sec: 6 7 0 0 0 0 0 0 0 … &#x2F;&#x2F;后面还有很多 0</p></blockquote><h4 id="注意：这里用-0-表示初始化时的默认值。"><a href="#注意：这里用-0-表示初始化时的默认值。" class="headerlink" title="注意：这里用 0 表示初始化时的默认值。"></a>注意：这里用 0 表示初始化时的默认值。<br></h4><p>如果没有rev函数，相减时就不方便了(<u>无法做到个位对齐个位、十位对其十位…</u>)。采用倒序存储方式，可以方便地从低位向高位计算从而达到简化计算的目的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 大整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大整数加法</title>
      <link href="/2023/03/23/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%8A%A0%E6%B3%95/"/>
      <url>/2023/03/23/%E5%A4%A7%E6%95%B4%E6%95%B0%E5%8A%A0%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="大整数加法"><a href="#大整数加法" class="headerlink" title="大整数加法"></a>大整数加法</h1><p>使用数组存储每个数字的每个位数，对于两个输入的超长整数字符串，程序能够在逐位相加时实现进位。最后将结果再次转化为字符串输出。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将两个字符串翻转存储到数组中 */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rev</span><span class="params">(<span class="type">int</span> fir[], <span class="type">int</span> sec[], string a, string b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>(); i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将第一个字符串翻转存储到 fir 数组中</span></span><br><span class="line">        fir[i] = a[a.<span class="built_in">length</span>() - i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">length</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将第二个字符串翻转存储到 sec 数组中</span></span><br><span class="line">        sec[i] = b[b.<span class="built_in">length</span>() - i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取两个数的最大值 */</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    <span class="type">int</span> fir[<span class="number">202</span>], sec[<span class="number">202</span>], ans[<span class="number">202</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 数组初始化为 0</span></span><br><span class="line">    <span class="type">int</span> i, x, len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环读入两个字符串并进行加法，直到输入结束</span></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; a &gt;&gt; b) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 初始化数组</span></span><br><span class="line">        len = <span class="built_in">max</span>(a.<span class="built_in">length</span>(), b.<span class="built_in">length</span>()); <span class="comment">// 数组长度为两个字符串长度的最大值</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= len; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            fir[i] = <span class="number">0</span>;</span><br><span class="line">            sec[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将两个字符串翻转并存储到数组中</span></span><br><span class="line">        <span class="built_in">rev</span>(fir, sec, a, b);</span><br><span class="line"></span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将两个数组中的数位相加并存储在新的数组中</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= len; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            ans[i] = fir[i] + sec[i] + x; <span class="comment">// 将每一位相加</span></span><br><span class="line">            x = ans[i] / <span class="number">10</span>; <span class="comment">// x 为进位</span></span><br><span class="line">            ans[i] %= <span class="number">10</span>; <span class="comment">// ans 数组中只存储个位数</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若最高位为 0，则长度减 1</span></span><br><span class="line">        <span class="keyword">if</span>(ans[len] == <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将结果输出</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; ans[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><p>这段代码实现了大整数加法的功能。<br /><br />具体来说，代码中使用两个整型数组存储要相加的两个大整数，然后将这两个数组中的元素从低位到高位逐位相加，进位等操作都通过简单的循环结构实现。<br /><br />这种方法的好处在于可以适用于任意长度的大整数，而不受固定长度的限制。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 大整数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2023/03/17/KMP%E7%AE%97%E6%B3%95/"/>
      <url>/2023/03/17/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><p>KMP算法是一种用于在字符串匹配过程中提高匹配效率的算法，被广泛应用于字符串匹配和文本搜索领域。通过预处理模式串的next数组，以减少匹配的次数，从而优化算法效率。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//KMP算法主体</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">index</span><span class="params">(string S,string T,<span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;S.<span class="built_in">length</span>()&amp;&amp;j&lt;T.<span class="built_in">length</span>();)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S[i]==T[j]||j==<span class="number">0</span>)<span class="comment">//字符匹配或者T串已经退到第一个位置</span></span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j=next[j];<span class="comment">//回退到next[j]位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(j&gt;=T.<span class="built_in">length</span>())<span class="comment">//匹配成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> i-j+<span class="number">1</span>;<span class="comment">//返回S中开始匹配的位置</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//匹配失败</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算next数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(string T, <span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;<span class="comment">//next数组中第一个元素为-1</span></span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//next数组中第二个元素为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; T.<span class="built_in">length</span>();)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (T[i - <span class="number">1</span>] == T[j])<span class="comment">//T串的第i-1个字符与T串的第j个字符匹配成功</span></span><br><span class="line">        &#123;</span><br><span class="line">            next[i++] = ++j;<span class="comment">//next[i]的值为j+1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="number">0</span>)<span class="comment">//若j&gt;0,回退到next[j]</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//若j&lt;=0，则next[i]=0</span></span><br><span class="line">        &#123;</span><br><span class="line">            next[i++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string S,T;</span><br><span class="line">    cin&gt;&gt;S&gt;&gt;T;<span class="comment">//输入S串和T串</span></span><br><span class="line">    <span class="type">int</span> next[T.<span class="built_in">length</span>()];</span><br><span class="line">    <span class="built_in">getNext</span>(T, next);<span class="comment">//获取next数组</span></span><br><span class="line">    cout&lt;&lt;<span class="built_in">index</span>(S,T,next)&lt;&lt;endl;<span class="comment">//输出匹配结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出匹配过程中使用的T串以及其对应的next数组</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;--------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;本次匹配的T字符串为：&quot;</span> &lt;&lt; T &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;next数组为：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;T.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        cout &lt;&lt; next[i] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="KMP算法总结"><a href="#KMP算法总结" class="headerlink" title="KMP算法总结:"></a>KMP算法总结:</h1><p>当我们需要进行字符串匹配时，KMP算法是一种优秀的选择<br><br>其核心思想在于，避免不必要的重复匹配，从而提高匹配效率<br></p><p>算法流程：</p><ol><li>计算模式串T的next数组</li><li>进行匹配<br>若S[i] &#x3D;&#x3D; T[j]，或者j等于0，则i和j分别加1，继续匹配<br>否则，j回退到next[j]的位置<br>继续匹配，直至j等于模式串T的长度或S串结束</li><li>若匹配成功，则返回S中开始匹配的位置</li></ol><p>next数组的计算:<br>next[i]表示T中以t[i-1]结尾的字符串的最长公共前后缀的长度<br>即从第一个字符开始的子串和从i往前数的最长相等子串，例如：<br><br>T： a b a b c a b<br><br>next：0 0 1 2 0 1 2<br></p>]]></content>
      
      
      
        <tags>
            
            <tag> KMP算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyFirstBlog</title>
      <link href="/2023/03/16/MyFirstBlog/"/>
      <url>/2023/03/16/MyFirstBlog/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 任何一个伟大的目标，都有一个微不足道的开始 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/16/hello-world/"/>
      <url>/2023/03/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
